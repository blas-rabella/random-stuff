;; global variables
(setq
 inhibit-startup-screen t
 create-lockfiles nil
 make-backup-files nil
 column-number-mode t
 scroll-error-top-bottom t
 show-paren-delay 0.5
 use-package-always-ensure t
 sentence-end-double-space nil
 )

;; buffer local variables
(setq-default
 indent-tabs-mode nil
 tab-width 4
 c-basic-offset 4
)

;; modes
(electric-indent-mode 1)
(electric-pair-mode 1)

;; global keybindings
(global-unset-key (kbd "C-z"))

;; the package manager
(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa-stable" . 1)))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;; TOOLS

(use-package magit
  :commands magit-status magit-blame
  :init (setq
         magit-revert-buffers nil
         ediff-window-setup-function 'ediff-setup-windows-plain)
)

(use-package flycheck
  :ensure t
  :defer t
  :init (global-flycheck-mode))

(use-package company
  :ensure t
  :defer t
  :init (global-company-mode)
  :config
  (progn
    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t)
    (setq company-dabbrev-downcase nil))
  :diminish company-mode)

(use-package company-quickhelp          ; Documentation popups for Company
  :ensure t
  :defer t
  :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))

(use-package yasnippet
  :ensure t
  :defer 2
  :diminish (yas-minor-mode yas-global-mode)
  :if (display-graphic-p)
  :init (setq yas-indent-line t)
  :config (yas-global-mode))

(use-package yasnippet-snippets
  :ensure t)

(use-package counsel :ensure t)

(use-package counsel-projectile
  :ensure t
  :config
(counsel-projectile-mode))

(use-package ivy :demand
  :config
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d ")
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-rg)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
)

(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :custom
  (projectile-completion-system 'ivy)
  )

(use-package evil
  :init
  (progn
    (setq evil-default-cursor t)
    (use-package evil-leader
      :init (global-evil-leader-mode)
      :config
      (progn
        (setq evil-leader/in-all-states t)
        (evil-leader/set-leader "<SPC>")
        ;; keyboard shortcuts
        (evil-leader/set-key
          "g" 'magit-status
          )))

    ;; boot evil by default
    (evil-mode 1))
  :config
  (progn
    ;; use ido to open files
    (define-key evil-ex-map "e " 'ido-find-file)
    (define-key evil-ex-map "b " 'ido-switch-buffer)
    (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
    (define-key evil-insert-state-map (kbd "C-k") 'kill-line)
    (define-key evil-insert-state-map (kbd "C-w") 'kill-region)
    (define-key evil-visual-state-map (kbd "C-e") 'move-end-of-line)
    (define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
    (define-key evil-normal-state-map (kbd "C-k") 'kill-line)
    (define-key evil-normal-state-map (kbd "C-y") 'yank)
    (define-key evil-insert-state-map (kbd "C-y") 'yank)
    (define-key evil-normal-state-map (kbd "C-w") 'kill-region)
    (define-key evil-visual-state-map (kbd "C-w") 'kill-region)

    ;; modes to map to different default states
    (dolist (mode-map '((comint-mode . emacs)
                        (term-mode . emacs)
                        (eshell-mode . emacs)
                        (help-mode . emacs)))
      (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))))

;; UI
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-nord))

(use-package doom-modeline
      :ensure t
      :init (setq doom-modeline-checker-simple-format nil
                  doom-modeline-lsp t
                  doom-modeline-buffer-file-name-style 'relative-from-project
                  evil-normal-state-tag   (propertize "<N>" 'face '((:background "green" :foreground "black")))
                  evil-emacs-state-tag    (propertize "<E>" 'face '((:background "orange" :foreground "black")))
                  evil-insert-state-tag   (propertize "<I>" 'face '((:background "red") :foreground "white"))
                  evil-motion-state-tag   (propertize "<M>" 'face '((:background "blue") :foreground "white"))
                  evil-visual-state-tag   (propertize "<V>" 'face '((:background "grey80" :foreground "black")))
                  evil-operator-state-tag (propertize "<O>" 'face '((:background "purple"))))
      :hook (after-init . doom-modeline-mode))

;; (use-package nord-theme 
;;   :ensure t 
;;   :load-path "themes"
;;   :config
;;   (load-theme 'nord t))

;; (use-package spaceline
;;   :ensure t
;;   :init
;;   (require 'spaceline-config)
;;   (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
;;   :config
;;   (spaceline-spacemacs-theme)
;; )

;; LANGUAGES
(use-package lsp-mode
 :init (setq lsp-prefer-flymake nil))

(use-package lsp-ui)

;; Add company-lsp backend for metals
(use-package company-lsp)

;; ;; Enable scala-mode and sbt-mode
;; (use-package scala-mode
;;   :mode "\\.s\\(cala\\|bt\\)$")
;; 
;; (use-package sbt-mode
;;   :commands sbt-start sbt-command
;;   :config
;;   ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
;;   ;; allows using SPACE when in the minibuffer
;;   (substitute-key-definition
;;    'minibuffer-complete-word
;;    'self-insert-command
;;    minibuffer-local-completion-map))
;; 
;; (use-package lsp-scala
;;   :after scala-mode
;;   :demand t
;;   ;; Optional - enable lsp-scala automatically in scala files
;;   :hook (scala-mode . lsp))
;; 
;; (use-package dockerfile-mode :ensure t)
;; (use-package docker-compose-mode :ensure t)
;; (use-package groovy-mode
;;   :ensure t
;;   :mode "Jenkinsfile")
;; 
