;;; Blas Emacs config
;;; Code:
(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa" . 1)))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
;; UI
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
;; (package-install 'dracula-theme)	;
(setq-default indent-tabs-mode nil)
(setq tab-width 4) ; or any other preferred value
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(load-theme 'dracula t)
(electric-pair-mode 1)
(require 'all-the-icons)
(all-the-icons-ivy-setup)
(use-package neotree)
(setq neo-theme 'icons)

(require 'dashboard)
(dashboard-setup-startup-hook)
(require 'highlight-symbol)
(global-set-key [(control f3)] 'highlight-symbol)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
(global-set-key [(meta f3)] 'highlight-symbol-query-replace)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(require 'highlight-indentation)
(set-face-background 'highlight-indentation-face "#383a46")
(set-face-background 'highlight-indentation-current-column-face "#54576a")
(hl-line-mode t)

(require 'airline-themes)
;; (require 'spaceline-config)
;; (spaceline-spacemacs-theme)
;; (setq powerline-default-separator 'wave)
;; ;; 
;; (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
;; (set-face-attribute 'spaceline-evil-emacs nil :background "#ff149a")
;; (set-face-attribute 'spaceline-evil-insert nil :background "#00cd00")
;; (set-face-attribute 'spaceline-evil-motion nil :background "#E4F34a")
;; (set-face-attribute 'spaceline-evil-normal nil :background "#0385f9")
;; (set-face-attribute 'spaceline-evil-replace nil :background "#E64747")
;; (set-face-attribute 'spaceline-evil-visual nil :background "#ffa500")
 
(load-theme 'airline-dracula t)         
(setq powerline-utf-8-separator-left        #xe0b0 
      powerline-utf-8-separator-right       #xe0b2
      airline-utf-glyph-separator-left      #xe0b0
      airline-utf-glyph-separator-right     #xe0b2
      airline-utf-glyph-subseparator-left   #xe0b1
      airline-utf-glyph-subseparator-right  #xe0b3
      airline-utf-glyph-branch              #xe0a0
      airline-utf-glyph-readonly            #xe0a2
      airline-utf-glyph-linenumber          #xe0a1)

;; (require 'powerline)
;; (powerline-default-theme)
;; ;; These two lines are just examples
;; (setq powerline-arrow-shape 'round)
;; ;
                                        ;(setq powerline-default-separator-dir '(right . left))
;; These two lines you really need.


(set-face-attribute 'default nil :font "Iosevka-11" )
(set-frame-font "Iosevka-11" nil t)
;; (require 'flycheck-color-mode-line)

;;(eval-after-load "flycheck"
;;  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
;; JIRA
;;(setq jiralib-url "https://blueliv.atlassian.net")
(require 'org)
(keychain-refresh-environment)

;; (package-install multiple-cursors)
;; (package-install yasnippet)
(require 'multiple-cursors)
(require 'yasnippet)
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)
;; Company
;; (package-install 'company)
;; (package-install 'company-ghc)
;; (package-install 'company-anaconda)
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(company-quickhelp-mode 1)
(add-to-list 'company-backends 'company-edbi)
                                        ; Flycheck
;; (package-install 'flycheck)
;; (package-install 'flycheck-ghcmod)
;; (package-install 'flycheck-pyflakes)
;; (package-install 'flycheck-pos-tip)
;; (package-install 'hydra)
(global-flycheck-mode)
(with-eval-after-load 'flycheck
  (flycheck-pos-tip-mode))
;; (add-to-list 'display-buffer-alist
;;              `(,(rx bos "*Flycheck errors*" eos)
;;                (display-buffer-reuse-window
;;                 display-buffer-in-side-window)
;;                (side            . bottom)
;;                (reusable-frames . visible)
;;                (window-height   . 0.2)))

;; IVY
;; (package-install 'ivy)
;; (package-install 'counsel)
;; (package-install 'swiper)
;; (package-install 'projectile)
(ivy-mode 1)
(projectile-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-rg)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;; (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
(counsel-projectile-on)
(require 'flyspell-correct-ivy)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic)

;; MAGIT
;; (package-install 'magit)
(require 'magit)
;; EVIL
;; (package-install 'neotree)
;; (package-install 'evil)
;; (package-install 'evil-magit)
(global-evil-leader-mode)
(evil-leader/set-key
  "p f" 'counsel-projectile-find-file
  "g" 'magit-status
  "e" 'hydra-flycheck/body
  "/" 'hydra-projectile/body
  "mc" 'hydra-multiple-cursors/bodydef 
  "l" 'neotree-projectile-action
  ;; "e l" 'flycheck-list-errors
  )
(evil-leader/set-leader "<SPC>")
(require 'evil)
(require 'evil-magit)
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "C-k") 'kill-line)
(define-key evil-insert-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-normal-state-map (kbd "C-k") 'kill-line)
(define-key evil-normal-state-map (kbd "C-y") 'yank)
(define-key evil-insert-state-map (kbd "C-y") 'yank)
(define-key evil-normal-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-w") 'kill-region)

;; HASKELL
;; (package-install 'ghc)
(let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
  (setenv "PATH" (concat my-cabal-path ":" (getenv "PATH")))
  (add-to-list 'exec-path my-cabal-path))
(add-hook 'haskell-mode-hook (lambda () (ghc-init)))
;; (add-hook 'haskell-mode-hook 'structured-haskell-mode)
(eval-after-load "company"
  '(add-to-list 'company-backends 'company-ghc))

;; (require 'intero)
;; (add-hook 'haskell-mode-hook 'intero-mode)
;; (flycheck-add-next-checker 'intero '(warning . haskell-hlint))
;; PYTHON
;; (package-install 'yasnippet)
;; (package-install 'py-isort)
;; (package-install 'yapfify)
;; (package-install 'py-yapf)
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'yapf-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(require 'py-isort)
(add-hook 'before-save-hook 'py-isort-before-save)
;;(add-hook 'python-mode-hook 'ac-anaconda-setup)
(eval-after-load "company"
  '(add-to-list 'company-backends 'company-anaconda))

;; SCALA
;; (use-package ensime
;;   :ensure t)
(use-package ensime
  :ensure t
  :pin melpa)
(use-package sbt-mode
  :pin melpa)

(use-package scala-mode
  :pin melpa)

(setq ensime-search-interface 'ivy)
(setq ensime-eldoc-hints 'all)

(add-hook 'scala-mode-hook
          (lambda ()
            ;; (show-paren-mode)
            ;; (smartparens-mode)
            (yas-minor-mode)
            ;; (git-gutter-mode)
            (company-mode)
            (ensime-mode)
            (scala-mode:goto-start-of-code)))
;;;; JAVA


(require 'meghanada)
(add-hook 'java-mode-hook
          (lambda ()
            ;; meghanada-mode on
            (meghanada-mode t)
            (setq c-basic-offset 4)))
;; use code format
;; (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))

;; PERL

(add-to-list 'company-backends 'company-plsense)
(add-hook 'perl-mode-hook 'company-mode)
(add-hook 'cperl-mode-hook 'company-mode)

;;; TIDAL

;; (add-to-list 'load-path "~/Projects/tidal")
;; (require 'tidal)

;;; CLOJURE
(unless (package-installed-p 'cider)
  (package-install 'cider))
(setq cider-font-lock-dynamically '(macro core function var))


;;; RUST
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)

(require 'rust-mode)
(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)

;;(add-hook 'perl-mode-hook (add-ac-sources 'ac-source-perl-completion))
;; OTHER
;; HYDRAS
(defhydra hydra-multiple-cursors (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil))

(defhydra hydra-projectile-other-window (:color teal)
  "projectile-other-window"
  ("f"  projectile-find-file-other-window        "file")
  ("g"  projectile-find-file-dwim-other-window   "file dwim")
  ("d"  projectile-find-dir-other-window         "dir")
  ("b"  projectile-switch-to-buffer-other-window "buffer")
  ("q"  nil                                      "cancel" :color blue))

(defhydra hydra-projectile (:color teal
                                   :hint nil)
  "
     PROJECTILE: %(projectile-project-root)

     Find File            Search/Tags          Buffers                Cache
------------------------------------------------------------------------------------------
_s-f_: file            _a_: ripgrep           _i_: Ibuffer           _c_: cache clear
 _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
 _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
  _r_: recent file                                               ^^^^_z_: cache current
  _d_: dir

"
  ("a"   projectile-ripgrep)
  ("b"   projectile-switch-to-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   projectile-find-dir)
  ("s-f" projectile-find-file)
  ("ff"  projectile-find-file-dwim)
  ("fd"  projectile-find-file-in-directory)
  ("g"   ggtags-update-tags)
  ("s-g" ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("s-k" projectile-kill-buffers)
  ("m"   projectile-multi-occur)
  ("o"   projectile-multi-occur)
  ("s-p" projectile-switch-project "switch project")
  ("p"   projectile-switch-project)
  ("s"   projectile-switch-project)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("`"   hydra-projectile-other-window/body "other window")
  ("q"   nil "cancel" :color blue))

(defhydra hydra-flycheck
  (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
        :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
        :hint nil)
  "Errors"
  ("f"  flycheck-error-list-set-filter                            "Filter")
  ("j"  flycheck-next-error                                       "Next")
  ("k"  flycheck-previous-error                                   "Previous")
  ("gg" flycheck-first-error                                      "First")
  ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
  ("q"  nil))

(defun setup-pragmata-ligatures ()
  (setq prettify-symbols-alist
        (append prettify-symbols-alist
                '(

                  ;; Personal preference: I like this set of arrows better than default
                  ("<-"   . ?🡐)
                  ("->"   . ?🡒)
                  ("=>"   . ?⇒)
                  ("<=>"  . ?⟺)
                  ("<==>" . ?⟺)
                  ("==>"  . ?⟹)
                  ("<=="  . ?⟸)
                  ("|->"  . ?⟼)
                  ("<-|"  . ?⟻)
                  ("|=>"  . ?⟾)
                  ("<=|"  . ?⟽)
                  ))))

(defun refresh-pretty ()
  (prettify-symbols-mode -1)
  (prettify-symbols-mode +1))

;; Hooks for modes in which to install the Pragmata ligatures
(mapc (lambda (hook)
        (add-hook hook (lambda () (setup-pragmata-ligatures) (refresh-pretty))))
      '(text-mode-hook
        prog-mode-hook))
(global-prettify-symbols-mode +1)
(setq prettify-symbols-unprettify-at-point 'right-edge)

